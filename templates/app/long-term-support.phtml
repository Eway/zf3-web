<?php $this->headTitle('About')->prepend('Support and Long Term Support Policies'); ?>

<h2>Support and Long Term Support Policies</h2>

<p>
    We provide two support policies, one governing general support for
    components, and another governing long term support for skeleton applications.
</p>

<h3>Terminology</h3>

<ul>
    <li><strong>Active support</strong>: During this period, a package may
        receive new features, bugfixes, and/or security patches.</li>
    <li><strong>Security support</strong>: During this period, a package may
        receive security patches and/or criticial bugfixes only.</li>
    <li><strong>Security patches (or fixes)</strong>: Patches created due to a report of a
        potential or known security vulnerability, as verified by the
        <a href="/security">security team</a>.</li>
    <li><strong>Critical bugfixes</strong>: Fixes for bugs introduced within a
        new minor release cycle.</li>
    <li><strong>Skeleton package</strong>: Any package defined as a
        <a href="https://getcomposer.org/doc/04-schema.md#type">Composer "project" type</a>,
        for the purpose of initiating a new project/application.</li>
    <li><strong>LTS</strong>: Long-Term Support.</li>
</ul>

<h3>Component support policy</h3>

This policy governs individual component packages.

<ul>
    <li>
        When a new major release of a component is made, the previous minor
        release enters its <em>security support</em> phase for a period of 12
        months, receiving only critical bugfixes and security fixes.
    </li>
    
    <li>
        Otherwise, a component remains in <em>active support</em> unless we
        provide notice of deprecation/abandonment. Once such a notice is made,
        the component will enter a <em>security support</em> phase for a period
        of 12 months.
    </li>

    <li>
        When a new minor release of a component is made, the previous minor
        release is no longer supported and will not receive security fixes.
    </li>
</ul>

<p>
    Users are encouraged to update to the latest supported version. As we follow
    <a href="https://semver.org">semantic versioning</a>, your code will continue to
    work without changes within the same major version.
</p>

<h3>Long Term Support Policy</h3>

This policy governs <em>skeleton packages</em> and their direct dependencies.
Direct dependencies are any Zend Framework dependencies listed in the skeleton
`composer.json`.

At the time of publication, skeleton applications we provide include:

<ul>
    <li><a href="https://github.com/zfdevteam/zf-apigility-skeleton">zf-apigility-skeleton</a> (Apigility applications)</li>
    <li><a href="https://github.com/zendframework/ZendSkeletonApplication">ZendSkeletonApplication</a> (zend-mvc applications)</li>
    <li><a href="https://github.com/zendframework/zend-expressive-skeleton">zend-expressive-skeleton</a> (Expressive applications)</li>
</ul>

For projects covered by this policy:

<ul>
    <li>New major versions will occur no sooner than 2 years after a major
        version is released.</li>
    <li>When a new major version is released, the previous minor release will enter a
        <em>security support</em> phase for a period of 2 years following the
        date of the new major release. <em>This means that the LTS is a minimum
        of 4 years.</em></li>
    <li>During the LTS period, all direct dependencies of the skeleton will
        receive <em>security support</em> in the latest versions possible under
        the version constraints as listed in the skeleton application's
        <code>composer.json</code> file.</li>
</ul>

<h3>Adopting an LTS version</h3>

<p>
    Opting-in to an LTS version of a component can be done using
    <a href="https://getcomposer.org/">Composer</a>:
</p>

<pre><code class="lang-bash" data-trim>
$ composer require "{package}:^{version}"
</code></pre>

<p>
    The above will modify your <kbd>composer.json</kbd> to provide a semantic
    version constraint, ensuring you only get backwards-compatible updates to
    the given package.
</p>

<h3>Current support versions</h3>

The following table includes a list of all components, along with its current
support status (Support or LTS), skeleton under which LTS is invoked (if any),
versions under support (multiple versions are possible when an LTS is present),
and date when support ends (if an LTS version or deprecated package).

When a component has multiple support statuses, it will be listed multiple
times, showing the specific status and version(s) it applies to. For LTS
components, the skeleton that provides the status is listed as well.

<table class="table table-bordered table-hover table-striped">
    <thead>
        <tr>
            <th>Package</th>
            <th>Supported Version(s)</th>
            <th>Status</th>
            <th>Support Ends</th>
            <th>Skeleton Projects</th>
        </tr>
    </thead>

    <tbody>
    <?php
    $previousPackage = null;
    foreach ($packages as $package) : ?>
        <tr>
            <td><?= $previousPackage === $package['name'] ? '' : sprintf('<a href="%s">%s</a>', $package['url'], $package['name']); ?></td>
            <td><?= implode(', ', $package['versions']) ?></td>
            <td><?= $package['status'] ?></td>
            <td><?= $package['support_ends'] ?></td>
            <td><?= $package['skeleton'] ?></td>
        </tr>
    <?php
        $previousPackage = $package['name'];
    endforeach;
    ?>
    </tbody>
</table>

<h4>Notes</h4>

<ul>
    <li>Any component or package NOT explicitly listed above is <strong>NOT
        SUPPORTED</strong>.</li>
    <li>Status <strong>ACTIVE</strong> indicates <em>active support</em> for the
        listed minor version and any version following within the same major version
        series.</li>
    <li>Status <strong>SECURITY</strong> indicates the listed minor release
        branch is receiving <em>security support</em>.</li>
    <li>Status <strong>LTS</strong> indicates <em>security support</em> (and, in
        most cases, <em>active support</em>) for the listed version within the
        listed major version series.</li>
    <li>If a component is in <strong>ACTIVE</strong> support status, there is no
        defined end of support date.</li>
</ul>

<h3>Expired LTS Versions</h3>

<p>
    The following table details former LTS versions that have now expired.
</p>

<table class="table table-striped">
    <thead>
        <tr>
            <td class="version">Version</td>
            <td class="release">Released</td>
            <td class="lts">LTS Ends</td>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td class="version">Zend Framework 1.12</td>
            <td class="release">2015-04-13</td>
            <td class="lts">2016-09-28</td>
        </tr>
        <tr>
            <td class="version">Zend Framework 2.4</td>
            <td class="release">2015-03-31</td>
            <td class="lts">2018-03-31</td>
        </tr>
    </tbody>
</table>

<aside>
    Last updated: 2018-07-11
</aside>

<?php $this->placeholder('sub-navigation')->set(
    $this->render('include::about-menu', ['active' => '/long-term-support'])
) ?>
